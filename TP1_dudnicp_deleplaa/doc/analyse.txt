### QUESTION 1 ###

Différence entre 
Dvector x; x = Dvector(3,1);    (1)
et
Dvector x = Dvector(3.1);       (2)

Nous pouvons mettre en évidence les différences entre ces deux affectations en lancant un test simple (test/demo_Q1.cpp):
    int main(int argc, char const *argv[])
    {
        Dvector x;
        x = Dvector(3, 1);
        x.display(std::cout);

        Dvector y = Dvector(3, 1);
        y.display(std::cout);

        return EXIT_SUCCESS;
    }


Etapes de l'affectation (1):
    - Construction de x via le constructeur par défaut.
    - Construction d'un objet temporaire (notons le temp)
    - Copie de temp dans x via l'opérateur = (non redéfini ici)
    - Destruction de temp

    L'opérateur = n'ayant pas été redéfini ici (il le sera dans le TP2), c'est l'opérateur par défaut qui est utilisé.
    Il y a alors deux affectation:
        - x.m_size = temp.m_size : copie de la taille temp.m_size
        - x.m_coords = temp.m_coords : copie de l'adresse mémoire temp.m_coords
    Lors de la destruction de temp, l'espace mémoire alloué à temp.m_coords est libéré.
    Mais cet espace mémoire est toujours pointé par x.m_coords c'est une source de problèmes.

    Affichage dans la console:
        Constructeur par défaut
        Constructeur taille / valeur
        Destructeur
        0
        1
        1
    On observe que les coordonnées de x sont faussées: on tente en effet d'acceder à un espace mémoire non alloué => Bug inévitable


Etapes de l'affectation (2):
    - Construction de y via le constructeur taille / valeur

    Affichage des étapes dans la console:
        Constructeur taille / valeur
        1
        1
        1
    L'affectation se fait sans problèmes, l'objet y est manipulable normalement par la suite.



### QUESTION 4 ###

Test Valgrind sur test/test_constructor.cpp:
    ==3858== HEAP SUMMARY:
    ==3858==     in use at exit: 0 bytes in 0 blocks
    ==3858==   total heap usage: 4 allocs, 4 frees, 73,776 bytes allocated
    ==3858== 
    ==3858== All heap blocks were freed -- no leaks are possible
    ==3858== 
    ==3858== For counts of detected and suppressed errors, rerun with: -v
    ==3858== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)